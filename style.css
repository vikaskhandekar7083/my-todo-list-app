<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced To-Do List</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&family=Roboto:wght@400;500&display=swap" rel="stylesheet">
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Background */
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(to right, #8e9eab, #eef2f3);
            color: #333;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: all 0.3s ease;
            padding: 20px;
        }

        .container {
            background-color: rgba(255, 255, 255, 0.8);
            width: 100%;
            max-width: 400px;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 15px 25px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        h1 {
            font-family: 'Poppins', sans-serif;
            font-size: 28px;
            color: #333;
            text-align: center;
            margin-bottom: 20px;
            letter-spacing: 1px;
        }

        input[type="text"] {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 8px;
            outline: none;
            transition: all 0.2s ease;
            margin-bottom: 10px;
        }

        input[type="text"]:focus {
            border-color: #ff6f61;
        }

        select {
            width: 100%;
            padding: 12px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 8px;
            outline: none;
            background-color: #fff;
            transition: all 0.2s ease;
            margin-bottom: 15px;
        }

        #taskList {
            list-style: none;
            padding: 0;
            max-height: 250px;
            overflow-y: auto;
            margin-bottom: 20px;
        }

        .task-item {
            background-color: rgba(255, 255, 255, 0.8);
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .task-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .task-content {
            flex-grow: 1;
            margin-right: 10px;
        }

        .task-category {
            font-size: 12px;
            color: #666;
            margin-top: 4px;
        }

        .button-group {
            display: flex;
            gap: 8px;
        }

        button {
            background-color: #ff6f61;
            color: #fff;
            padding: 10px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        button:hover {
            background-color: #ff8b7e;
            transform: scale(1.05);
        }

        #addTaskBtn {
            width: 100%;
            margin-bottom: 15px;
            font-size: 16px;
        }

        .edit-btn {
            background-color: #4caf50;
        }

        .delete-btn {
            background-color: #f44336;
        }

        .mode-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #333;
        }

        /* Dark Mode */
        body.dark-mode {
            background: linear-gradient(to right, #2c3e50, #3498db);
            color: #fff;
        }

        .dark-mode .container {
            background-color: rgba(30, 30, 30, 0.9);
        }

        .dark-mode h1 {
            color: #fff;
        }

        .dark-mode input[type="text"],
        .dark-mode select {
            background-color: #333;
            color: #fff;
            border-color: #444;
        }

        .dark-mode .task-item {
            background-color: rgba(50, 50, 50, 0.8);
            color: #fff;
        }

        .dark-mode .task-category {
            color: #aaa;
        }

        /* Scrollbar Styling */
        #taskList::-webkit-scrollbar {
            width: 8px;
        }

        #taskList::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        #taskList::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        #taskList::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        .dark-mode #taskList::-webkit-scrollbar-track {
            background: #333;
        }

        .dark-mode #taskList::-webkit-scrollbar-thumb {
            background: #666;
        }
    </style>
</head>
<body>
    <button class="mode-toggle" id="modeToggle">Dark Mode</button>
    <div class="container">
        <h1>Enhanced To-Do List</h1>
        <input type="text" id="newTaskInput" placeholder="Enter new task">
        <select id="taskCategory">
            <option value="Work">Work</option>
            <option value="Personal">Personal</option>
            <option value="Shopping">Shopping</option>
            <option value="Others">Others</option>
        </select>
        <button id="addTaskBtn">Add Task</button>
        <input type="text" id="searchTask" placeholder="Search tasks">
        <ul id="taskList"></ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const taskList = document.getElementById('taskList');
            const newTaskInput = document.getElementById('newTaskInput');
            const taskCategory = document.getElementById('taskCategory');
            const searchTask = document.getElementById('searchTask');
            const modeToggle = document.getElementById('modeToggle');
            const addTaskBtn = document.getElementById('addTaskBtn');

            let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

            function saveTasks() {
                localStorage.setItem('tasks', JSON.stringify(tasks));
            }

            function renderTasks() {
                const searchTerm = searchTask.value.toLowerCase();
                const filteredTasks = tasks.filter(task =>
                    task.name.toLowerCase().includes(searchTerm)
                );

                taskList.innerHTML = filteredTasks.map((task, index) => `
                    <li class="task-item">
                        <div class="task-content">
                            <div>${task.name}</div>
                            <div class="task-category">${task.category}</div>
                        </div>
                        <div class="button-group">
                            <button class="edit-btn" onclick="editTask(${index})">Edit</button>
                            <button class="delete-btn" onclick="deleteTask(${index})">Delete</button>
                        </div>
                    </li>
                `).join('');
            }

            function addTask() {
                const taskName = newTaskInput.value.trim();
                if (taskName) {
                    tasks.push({
                        name: taskName,
                        category: taskCategory.value
                    });
                    saveTasks();
                    newTaskInput.value = '';
                    renderTasks();
                }
            }

            window.editTask = function(index) {
                const newName = prompt('Edit task:', tasks[index].name);
                if (newName !== null && newName.trim() !== '') {
                    tasks[index].name = newName.trim();
                    saveTasks();
                    renderTasks();
                }
            };

            window.deleteTask = function(index) {
                if (confirm('Are you sure you want to delete this task?')) {
                    tasks.splice(index, 1);
                    saveTasks();
                    renderTasks();
                }
            };

            addTaskBtn.addEventListener('click', addTask);
            newTaskInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') addTask();
            });
            searchTask.addEventListener('input', renderTasks);

            modeToggle.addEventListener('click', function() {
                document.body.classList.toggle('dark-mode');
                const isDarkMode = document.body.classList.contains('dark-mode');
                modeToggle.textContent = isDarkMode ? 'Light Mode' : 'Dark Mode';
                localStorage.setItem('darkMode', isDarkMode);
            });

            // Initialize dark mode from localStorage
            if (localStorage.getItem('darkMode') === 'true') {
                document.body.classList.add('dark-mode');
                modeToggle.textContent = 'Light Mode';
            }

            // Initial render
            renderTasks();
        });
    </script>
</body>
</html>